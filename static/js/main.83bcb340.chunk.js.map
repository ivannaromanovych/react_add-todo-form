{"version":3,"sources":["api/todos.ts","api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","helpers/getUserById.ts","components/TodoList/TodoList.tsx","components/TodoForm/TodoForm.tsx","helpers/getNewTodoId.ts","App.tsx","index.tsx"],"names":["id","title","completed","userId","name","username","email","UserInfo","user","className","href","TodoInfo","todo","usersFromServer","find","cn","TodoList","todos","map","DEFAULT_INPUTS","DEFAULT_INPUTS_ERRORS","TodoForm","onAdd","users","useState","inputs","setInputs","inputsErrors","setInputsErrors","handleInputChange","event","target","value","newValue","prevFields","prevErrors","action","method","onSubmit","preventDefault","trim","prevInputs","type","placeholder","onChange","onBlur","defaultChecked","getNewTodoId","Math","max","App","todosFromServer","setTodos","todoInfo","newTodo","currTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.83bcb340.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React from 'react';\nimport { User } from '../../types/User';\n\ninterface Props {\n  user: User,\n}\n\nexport const UserInfo: React.FC<Props> = ({\n  user,\n}) => (\n  <a className=\"UserInfo\" href={`mailto:${user?.email}`}>\n    {user?.name}\n  </a>\n);\n","import React from 'react';\nimport cn from 'classnames';\n\nimport { UserInfo } from '../UserInfo';\nimport { Todo } from '../../types/Todo';\nimport { getUserById } from '../../helpers/getUserById';\n\ninterface Props {\n  todo: Todo\n}\n\nexport const TodoInfo: React.FC<Props> = ({\n  todo,\n}) => {\n  const user = getUserById(todo.userId);\n\n  return (\n    <article\n      data-id={todo.id}\n      className={cn(\n        'TodoInfo',\n        { 'TodoInfo--completed': todo.completed },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {todo.title}\n      </h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import { User } from '../types/User';\nimport usersFromServer from '../api/users';\n\nexport function getUserById(id: number): User | null {\n  return usersFromServer.find((user: User) => user.id === id) || null;\n}\n","import React from 'react';\nimport { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[]\n}\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo key={todo.id} todo={todo} />\n    ))}\n  </section>\n);\n","import React, { useState } from 'react';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\n\nconst DEFAULT_INPUTS = {\n  title: '',\n  userId: 0,\n};\n\nconst DEFAULT_INPUTS_ERRORS = {\n  title: false,\n  userId: false,\n};\n\ninterface Props {\n  onAdd: (newTodoInfo: Pick<Todo, 'title' | 'userId'>) => void;\n  users: User[],\n}\n\nexport const TodoForm: React.FC<Props> = ({\n  onAdd,\n  users,\n}) => {\n  const [inputs, setInputs] = useState(DEFAULT_INPUTS);\n  const [inputsErrors, setInputsErrors] = useState(DEFAULT_INPUTS_ERRORS);\n  const handleInputChange = (\n    event: React.ChangeEvent<HTMLInputElement>\n    | React.ChangeEvent<HTMLSelectElement>,\n  ) => {\n    const { name, value } = event.target;\n\n    const newValue = name === 'userId' ? +value : value;\n\n    setInputs(prevFields => ({\n      ...prevFields,\n      [name]: newValue,\n    }));\n\n    setInputsErrors(prevErrors => ({\n      ...prevErrors,\n      [name]: !newValue,\n    }));\n  };\n\n  const resetForm = () => {\n    setInputs(DEFAULT_INPUTS);\n    setInputsErrors(DEFAULT_INPUTS_ERRORS);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    setInputsErrors(() => ({\n      title: !inputs.title.trim(),\n      userId: !inputs.userId,\n    }));\n\n    setInputs(prevInputs => ({\n      ...prevInputs,\n      title: prevInputs.title.trim(),\n    }));\n\n    if (!inputs.title.trim() || !inputs.userId) {\n      return;\n    }\n\n    onAdd(inputs);\n    resetForm();\n  };\n\n  const handleBlur = () => {\n    setInputs(prevFields => ({\n      ...prevFields,\n      title: prevFields.title.trim(),\n    }));\n  };\n\n  return (\n    <form\n      action=\"/api/todos\"\n      method=\"POST\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"field\">\n        {'Title: '}\n        <input\n          type=\"text\"\n          data-cy=\"titleInput\"\n          value={inputs.title}\n          placeholder=\"Enter title\"\n          onChange={handleInputChange}\n          onBlur={handleBlur}\n          name=\"title\"\n        />\n        {inputsErrors.title && (\n          <span className=\"error\">Please enter a title</span>\n        )}\n      </div>\n\n      <div className=\"field\">\n        {'User: '}\n        <select\n          data-cy=\"userSelect\"\n          value={inputs.userId}\n          onChange={handleInputChange}\n          name=\"userId\"\n        >\n          <option value=\"0\" defaultChecked>Choose a user</option>\n          {users.map(user => (\n            <option value={user.id} key={user.id}>\n              {user.name}\n            </option>\n          ))}\n        </select>\n\n        {inputsErrors.userId && (\n          <span className=\"error\">Please choose a user</span>\n        )}\n      </div>\n\n      <button type=\"submit\" data-cy=\"submitButton\">\n        Add\n      </button>\n    </form>\n  );\n};\n","import { Todo } from '../types/Todo';\n\nexport function getNewTodoId(todos: Todo[]) {\n  const maxId = Math.max(...todos.map(({ id }) => id));\n\n  return maxId + 1;\n}\n","import './App.scss';\nimport { useState } from 'react';\n\nimport todosFromServer from './api/todos';\nimport usersFromServer from './api/users';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoForm } from './components/TodoForm';\nimport { Todo } from './types/Todo';\nimport { getNewTodoId } from './helpers/getNewTodoId';\n\nexport const App = () => {\n  const [todos, setTodos] = useState<Todo[]>(todosFromServer);\n\n  const handleAddTodo = (todoInfo: Pick<Todo, 'title' | 'userId'>) => {\n    const newTodo: Todo = {\n      ...todoInfo,\n      id: getNewTodoId(todos),\n      completed: false,\n    };\n\n    setTodos(currTodos => [...currTodos, newTodo]);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <TodoForm onAdd={handleAddTodo} users={usersFromServer} />\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}